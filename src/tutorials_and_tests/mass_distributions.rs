use uom::si::{energy::electronvolt, f64::Energy};

use crate::endf_8_parent_independent_yields::nuclides::Nuclide;

/// test for u235 thermal neutron spectrum mass distribution
/// from independent fission yields
///
/// this helps give some assurance that the yield curves were coded correctly
#[test]
pub fn u235_thermal_mass_distribution(){

    let ref_u235_thermal_fission_distribution: Vec<(u32,f64)> = vec![
        (66 , 7.221154783E-8 * 1e-2 ),
        (67 , 3.60580594E-7 * 1e-2 ),
        (68 , 7.15773452E-7 * 1e-2 ),
        (69 , 1.572404041E-6 * 1e-2 ),
        (70 , 3.617294369E-6 * 1e-2 ),
        (71 , 8.384932499E-6 * 1e-2 ),
        (72 , 2.649483099E-5 * 1e-2 ),
        (73 , 1.017578527E-4 * 1e-2 ),
        (74 , 3.385258444E-4 * 1e-2 ),
        (75 , 0.001067698 * 1e-2  ), 
        (76 , 0.003097252 * 1e-2  ),
        (77 , 0.007959407 * 1e-2  ),
        (78 , 0.020928702 * 1e-2  ),
        (79 , 0.04466554 * 1e-2  ),
        (80 , 0.127950349 * 1e-2 ),
        (81 , 0.20331442 * 1e-2  ),
        (82 , 0.325749489 * 1e-2  ),
        (83 , 0.534757029 * 1e-2  ),
        (84 , 0.894030599 * 1e-2  ),
        (85 , 1.285686048 * 1e-2  ),
        (86 , 2.031157659 * 1e-2  ),
        (87 , 2.521424386 * 1e-2  ),
        (88 , 3.534232193 * 1e-2  ),
        (89 , 4.748484621 * 1e-2  ),
        (90 , 5.881169848 * 1e-2  ),
        (91 , 5.856082973 * 1e-2  ),
        (92 , 5.975203897 * 1e-2  ),
        (93 , 6.234634172 * 1e-2  ),
        (94 , 6.575448752 * 1e-2  ),
        (95 , 6.540931285 * 1e-2  ),
        (96 , 6.355827225 * 1e-2  ),
        (97 , 6.004721518 * 1e-2  ),
        (98 , 5.752561696 * 1e-2  ),
        (99 , 6.145832807 * 1e-2  ),
        (100 , 6.29747546 * 1e-2  ),
        (101 , 5.17255169 * 1e-2 ),
        (102 , 4.298202604 * 1e-2  ),
        (103 , 3.030784616 * 1e-2  ),
        (104 , 1.874196688 * 1e-2  ),
        (105 , 0.970923711 * 1e-2  ),
        (106 , 0.401696587 * 1e-2  ),
        (107 , 0.146192175 * 1e-2  ),
        (108 , 0.054076893 * 1e-2  ),
        (109 , 0.031171865 * 1e-2 ),
        (110 , 0.025539745 * 1e-2  ),
        (111 , 0.017431062 * 1e-2  ),
        (112 , 0.013041562 * 1e-2  ),
        (113 , 0.014204163 * 1e-2  ),
        (114 , 0.011832255 * 1e-2  ),
        (115 , 0.012583538 * 1e-2  ),
        (116 , 0.013247675 * 1e-2 ),
        (117 , 0.012762065 * 1e-2  ),
        (118 , 0.01134433 * 1e-2  ),
        (119 , 0.012874003 * 1e-2  ),
        (120 , 0.012608503 * 1e-2  ),
        (121 , 0.013045295 * 1e-2  ),
        (122 , 0.015482111 * 1e-2  ),
        (123 , 0.015657475 * 1e-2  ),
        (124 , 0.026786665 * 1e-2  ),
        (125 , 0.03401805 * 1e-2  ),
        (126 , 0.058213923 * 1e-2  ),
        (127 , 0.157255954 * 1e-2  ),
        (128 , 0.348032728 * 1e-2  ),
        (129 , 0.543140253 * 1e-2 ),
        (130 , 1.811058294 * 1e-2  ),
        (131 , 2.890824589 * 1e-2  ),
        (132 , 4.313440531 * 1e-2  ),
        (133 , 6.696198002 * 1e-2  ),
        (134 , 7.84928048 * 1e-2  ),
        (135 , 6.546439498 * 1e-2  ),
        (136 , 6.097407229 * 1e-2  ),
        (137 , 6.343481393 * 1e-2 ),
        (138 , 6.775188009 * 1e-2  ),
        (139 , 6.476024729 * 1e-2  ),
        (140 , 6.222876589 * 1e-2  ),
        (141 , 5.852968798 * 1e-2  ),
        (142 , 5.829084852 * 1e-2  ),
        (143 , 5.96712544 * 1e-2  ),
        (144 , 5.50281141 * 1e-2  ),
        (145 , 3.942641326 * 1e-2  ),
        (146 , 2.99791899 * 1e-2  ),
        (147 , 2.246727171 * 1e-2  ),
        (148 , 1.672677043 * 1e-2  ),
        (149 , 1.082444712 * 1e-2 ),
        (150 , 0.653327209 * 1e-2  ),
        (151 , 0.418766758 * 1e-2  ),
        (152 , 0.266913263 * 1e-2  ),
        (153 , 0.158278407 * 1e-2  ),
        (154 , 0.074434159 * 1e-2  ),
        (155 , 0.032134942 * 1e-2  ),
        (156 , 0.014852928 * 1e-2 ),
        (157 , 0.00615086 * 1e-2 ),
        (158 , 0.003285185 * 1e-2  ),
        (159 , 0.001009412 * 1e-2 ),
        (160 , 3.190061691E-4 * 1e-2 ),
        (161 , 8.529420585E-5 * 1e-2 ),
        (162 , 1.590628959E-5 * 1e-2 ),
        (163 , 6.101986897E-6 * 1e-2 ),
        (164 , 1.88168389E-6 * 1e-2 ),
        (165 , 9.514985206E-7 * 1e-2 ),
        (166 , 3.6241484E-7 * 1e-2 ),
        (167 , 2.471381139E-7 * 1e-2 ),
        (168 , 5.704560932E-8 * 1e-2 ),
        (169 , 2.38500397E-8 * 1e-2 ),
        (170 , 5.00652931E-9 * 1e-2 ),
        (171 , 2.3470269E-9 * 1e-2 ),
        (172 , 7.6867481E-10 * 1e-2 ),
        ];

    let neutron_energy = Energy::new::<electronvolt>(0.0253);
    let test_u235_fission_distribution = 
        Nuclide::U235.get_mass_yield_vector(neutron_energy);

    // this part cycles through the whole yield curve, 
    // testing to see if the yields add up
    for (idx, (ref_mass_number,ref_fiss_yield)) in 
        ref_u235_thermal_fission_distribution.clone().into_iter().enumerate() {

            let (test_mass_number, test_fiss_yield) = 
                test_u235_fission_distribution[idx];

            assert_eq!(ref_mass_number,test_mass_number);
            dbg!(&(ref_mass_number,ref_fiss_yield));

            approx::assert_relative_eq!(
                ref_fiss_yield,
                test_fiss_yield,
                max_relative=1e-6);

    }
    

}


/// test for pu239 thermal neutron spectrum mass distribution
/// from independent fission yields
///
/// this helps give some assurance that the yield curves were coded correctly
#[test]
pub fn pu239_thermal_mass_distribution(){

    // note that the yields are in percentage in this case
    let ref_pu239_thermal_fission_distribution: Vec<(u32,f64)> = vec![
        (66 , 2.20850275E-7 ),
        (67 , 4.489697979E-7 ),
        (68 , 1.62085199E-6 ),
        (69 , 5.888474498E-6 ),
        (70 , 1.991036943E-5 ),
        (71 , 3.6654888E-5 ),
        (72 , 1.214428027E-4 ),
        (73 , 2.619898892E-4 ),
        (74 , 6.359499959E-4 ),
        (75 , 0.001372296 ),
        (76 , 0.002936139 ),
        (77 , 0.007234539 ),
        (78 , 0.018769495 ),
        (79 , 0.043626486 ),
        (80 , 0.093737297 ),
        (81 , 0.183777724 ),
        (82 , 0.229710837 ),
        (83 , 0.296651151 ),
        (84 , 0.473284639 ),
        (85 , 0.580769108 ),
        (86 , 0.748337529 ),
        (87 , 0.990088086 ),
        (88 , 1.312793897 ),
        (89 , 1.71909887 ),
        (90 , 2.153561833 ),
        (91 , 2.48871035 ),
        (92 , 2.988235036 ),
        (93 , 3.7456154 ),
        (94 , 4.358534619 ),
        (95 , 4.849266074 ),
        (96 , 4.896387489 ),
        (97 , 5.414419814 ),
        (98 , 5.804398113 ),
        (99 , 6.23873487 ),
        (100 , 6.777500847 ),
        (101 , 6.019096217 ),
        (102 , 6.125849653 ),
        (103 , 6.994607222 ),
        (104 , 6.084120339 ),
        (105 , 5.654659047 ),
        (106 , 4.350492506 ),
        (107 , 3.330018375 ),
        (108 , 2.163559081 ),
        (109 , 1.477999534 ),
        (110 , 0.64537285 ),
        (111 , 0.295989913 ),
        (112 , 0.128507187 ),
        (113 , 0.081662695 ),
        (114 , 0.060253061 ),
        (115 , 0.042599296 ),
        (116 , 0.050677783 ),
        (117 , 0.044459645 ),
        (118 , 0.032486849 ),
        (119 , 0.032249541 ),
        (120 , 0.030584683 ),
        (121 , 0.03780659 ),
        (122 , 0.044693525 ),
        (123 , 0.044118416 ),
        (124 , 0.078717097 ),
        (125 , 0.111657097 ),
        (126 , 0.202163696 ),
        (127 , 0.506407506 ),
        (128 , 0.73400406 ),
        (129 , 1.371239886 ),
        (130 , 2.361852495 ),
        (131 , 3.856462152 ),
        (132 , 5.406876826 ),
        (133 , 7.015682579 ),
        (134 , 7.665568129 ),
        (135 , 7.626193138 ),
        (136 , 6.977840684 ),
        (137 , 6.716597781 ),
        (138 , 6.162849417 ),
        (139 , 5.663007492 ),
        (140 , 5.366999299 ),
        (141 , 5.247752024 ),
        (142 , 4.919876587 ),
        (143 , 4.419634054 ),
        (144 , 3.740921723 ),
        (145 , 2.989794159 ),
        (146 , 2.458402407 ),
        (147 , 2.002953216 ),
        (148 , 1.641710942 ),
        (149 , 1.216911076 ),
        (150 , 0.967471471 ),
        (151 , 0.738415599 ),
        (152 , 0.576309736 ),
        (153 , 0.361253921 ),
        (154 , 0.259783284 ),
        (155 , 0.165722594 ),
        (156 , 0.124016551 ),
        (157 , 0.074150329 ),
        (158 , 0.041437752 ),
        (159 , 0.020652978 ),
        (160 , 0.009681667 ),
        (161 , 0.004840906 ),
        (162 , 0.002231232 ),
        (163 , 9.166918812E-4 ),
        (164 , 3.295998381E-4 ),
        (165 , 1.343199815E-4 ),
        (166 , 6.662734329E-5 ),
        (167 , 1.521095536E-5 ),
        (168 , 4.285299628E-6 ),
        (169 , 1.47338923E-6 ),
        (170 , 3.175224984E-7 ), 
        (171 , 1.57091487E-7 ),
        (172 , 4.940206248E-8 ),
        ];

    let neutron_energy = Energy::new::<electronvolt>(0.0253);
    let test_pu239_fission_distribution = 
        Nuclide::Pu239.get_mass_yield_vector(neutron_energy);

    // this part cycles through the whole yield curve, 
    // testing to see if the yields add up
    for (idx, (ref_mass_number,ref_fiss_yield)) in 
        ref_pu239_thermal_fission_distribution.clone().into_iter().enumerate() {

            let (test_mass_number, test_fiss_yield) = 
                test_pu239_fission_distribution[idx];

            assert_eq!(ref_mass_number,test_mass_number);
            dbg!(&(ref_mass_number,ref_fiss_yield));

            approx::assert_relative_eq!(
                ref_fiss_yield * 1e-2,
                test_fiss_yield,
                max_relative=1e-6);

    }
    

}
/// test for u233 thermal neutron spectrum mass distribution
/// from independent fission yields
///
/// this helps give some assurance that the yield curves were coded correctly
#[test]
pub fn u233_thermal_mass_distribution(){

    // note that the yields are in percentage in this case
    let ref_u233_thermal_fission_distribution: Vec<(u32,f64)> = vec![
        (66 , 2.502551159E-7 ),
        (67 , 1.119579085E-6 ),
        (68 , 3.423428838E-6 ),
        (69 , 9.405139079E-6 ),
        (70 , 3.667369121E-5 ),
        (71 , 1.618443483E-4 ),
        (72 , 4.167209698E-4 ),
        (73 , 0.001155698 ),
        (74 , 0.002708537 ),
        (75 , 0.007980386 ),
        (76 , 0.013845948 ),
        (77 , 0.025958255 ),
        (78 , 0.053810893 ),
        (79 , 0.143473482 ),
        (80 , 0.233668544 ),
        (81 , 0.367997198 ),
        (82 , 0.586514009 ),
        (83 , 1.01366894 ),
        (84 , 1.637075476 ),
        (85 , 2.28675843 ),
        (86 , 2.79372467 ),
        (87 , 3.99110128 ),
        (88 , 5.458866175 ),
        (89 , 6.37139734 ),
        (90 , 6.836401885 ),
        (91 , 6.49131628 ),
        (92 , 6.5231922 ),
        (93 , 6.947971922 ),
        (94 , 6.875683872 ),
        (95 , 6.363539514 ),
        (96 , 5.679285665 ),
        (97 , 5.51495057 ),
        (98 , 5.178916964 ),
        (99 , 4.924585419 ),
        (100 , 4.46005635 ),
        (101 , 3.171171086 ),
        (102 , 2.40263594 ),
        (103 , 1.573171801 ),
        (104 , 0.978773412 ),
        (105 , 0.49726155 ),
        (106 , 0.246274669 ),
        (107 , 0.114529276 ),
        (108 , 0.075732588 ),
        (109 , 0.039373865 ),
        (110 , 0.03872445 ),
        (111 , 0.02159965 ),
        (112 , 0.013304075 ),
        (113 , 0.013561837 ),
        (114 , 0.012858859 ),
        (115 , 0.014980901 ),
        (116 , 0.013200504 ),
        (117 , 0.014123583 ),
        (118 , 0.015416675 ),
        (119 , 0.018557628 ),
        (120 , 0.021828759 ),
        (121 , 0.023080551 ),
        (122 , 0.040967494 ),
        (123 , 0.060413719 ),
        (124 , 0.074620782 ),
        (125 , 0.116959188 ),
        (126 , 0.225923033 ),
        (127 , 0.555616609 ),
        (128 , 0.835657242 ),
        (129 , 1.592378655 ),
        (130 , 2.091662802 ),
        (131 , 3.6042878 ),
        (132 , 4.953441249 ),
        (133 , 5.94994417 ),
        (134 , 6.300450983 ),
        (135 , 6.262644568 ),
        (136 , 6.797547708 ),
        (137 , 6.839653539 ),
        (138 , 5.920187372 ),
        (139 , 6.324751214 ),
        (140 , 6.424557278 ),
        (141 , 6.480860959 ),
        (142 , 6.665505861 ),
        (143 , 5.96912549 ),
        (144 , 4.725947568 ),
        (145 , 3.447067838 ),
        (146 , 2.586059129 ),
        (147 , 1.738358062 ),
        (148 , 1.301229272 ),
        (149 , 0.778427205 ),
        (150 , 0.505713296 ),
        (151 , 0.315715923 ),
        (152 , 0.213633962 ),
        (153 , 0.103681824 ),
        (154 , 0.046688313 ),
        (155 , 0.021429042 ),
        (156 , 0.012794647 ),
        (157 , 0.006303034 ),
        (158 , 0.002054898 ),
        (159 , 8.860200125E-4 ),
        (160 , 3.165138246E-4 ),
        (161 , 1.21575115E-4 ),
        (162 , 1.271547591E-5 ),
        (163 , 5.927061979E-6 ),
        (164 , 1.951632249E-6 ),
        (165 , 6.321491645E-7 ),
        (166 , 3.674433199E-7 ),
        (167 , 5.083981852E-8 ),
        (168 , 1.28996777E-8 ),
        (169 , 4.40452798E-9 ),
        (170 , 1.6187551E-9 ),
        (171 , 4.4605914E-10 ),
        (172 , 1.5076617E-10 ),
        ];

    let neutron_energy = Energy::new::<electronvolt>(0.0253);
    let test_u233_fission_distribution = 
        Nuclide::U233.get_mass_yield_vector(neutron_energy);

    // this part cycles through the whole yield curve, 
    // testing to see if the yields add up
    for (idx, (ref_mass_number,ref_fiss_yield)) in 
        ref_u233_thermal_fission_distribution.clone().into_iter().enumerate() {

            let (test_mass_number, test_fiss_yield) = 
                test_u233_fission_distribution[idx];

            assert_eq!(ref_mass_number,test_mass_number);
            dbg!(&(ref_mass_number,ref_fiss_yield));

            approx::assert_relative_eq!(
                ref_fiss_yield * 1e-2,
                test_fiss_yield,
                max_relative=1e-6);

    }
    

}
