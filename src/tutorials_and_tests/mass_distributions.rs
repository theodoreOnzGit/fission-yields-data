use uom::si::{energy::electronvolt, f64::Energy};

use crate::endf_8_parent_independent_yields::nuclides::Nuclide;

/// test for u235 thermal neutron spectrum mass distribution
/// from independent fission yields
///
/// this helps give some assurance that the yield curves were coded correctly
#[test]
pub fn u235_thermal_mass_distribution(){

    let ref_u235_thermal_fission_distribution: Vec<(u32,f64)> = vec![
        (66 , 7.221154783E-8 * 1e-2 ),
        (67 , 3.60580594E-7 * 1e-2 ),
        (68 , 7.15773452E-7 * 1e-2 ),
        (69 , 1.572404041E-6 * 1e-2 ),
        (70 , 3.617294369E-6 * 1e-2 ),
        (71 , 8.384932499E-6 * 1e-2 ),
        (72 , 2.649483099E-5 * 1e-2 ),
        (73 , 1.017578527E-4 * 1e-2 ),
        (74 , 3.385258444E-4 * 1e-2 ),
        (75 , 0.001067698 * 1e-2  ), 
        (76 , 0.003097252 * 1e-2  ),
        (77 , 0.007959407 * 1e-2  ),
        (78 , 0.020928702 * 1e-2  ),
        (79 , 0.04466554 * 1e-2  ),
        (80 , 0.127950349 * 1e-2 ),
        (81 , 0.20331442 * 1e-2  ),
        (82 , 0.325749489 * 1e-2  ),
        (83 , 0.534757029 * 1e-2  ),
        (84 , 0.894030599 * 1e-2  ),
        (85 , 1.285686048 * 1e-2  ),
        (86 , 2.031157659 * 1e-2  ),
        (87 , 2.521424386 * 1e-2  ),
        (88 , 3.534232193 * 1e-2  ),
        (89 , 4.748484621 * 1e-2  ),
        (90 , 5.881169848 * 1e-2  ),
        (91 , 5.856082973 * 1e-2  ),
        (92 , 5.975203897 * 1e-2  ),
        (93 , 6.234634172 * 1e-2  ),
        (94 , 6.575448752 * 1e-2  ),
        (95 , 6.540931285 * 1e-2  ),
        (96 , 6.355827225 * 1e-2  ),
        (97 , 6.004721518 * 1e-2  ),
        (98 , 5.752561696 * 1e-2  ),
        (99 , 6.145832807 * 1e-2  ),
        (100 , 6.29747546 * 1e-2  ),
        (101 , 5.17255169 * 1e-2 ),
        (102 , 4.298202604 * 1e-2  ),
        (103 , 3.030784616 * 1e-2  ),
        (104 , 1.874196688 * 1e-2  ),
        (105 , 0.970923711 * 1e-2  ),
        (106 , 0.401696587 * 1e-2  ),
        (107 , 0.146192175 * 1e-2  ),
        (108 , 0.054076893 * 1e-2  ),
        (109 , 0.031171865 * 1e-2 ),
        (110 , 0.025539745 * 1e-2  ),
        (111 , 0.017431062 * 1e-2  ),
        (112 , 0.013041562 * 1e-2  ),
        (113 , 0.014204163 * 1e-2  ),
        (114 , 0.011832255 * 1e-2  ),
        (115 , 0.012583538 * 1e-2  ),
        (116 , 0.013247675 * 1e-2 ),
        (117 , 0.012762065 * 1e-2  ),
        (118 , 0.01134433 * 1e-2  ),
        (119 , 0.012874003 * 1e-2  ),
        (120 , 0.012608503 * 1e-2  ),
        (121 , 0.013045295 * 1e-2  ),
        (122 , 0.015482111 * 1e-2  ),
        (123 , 0.015657475 * 1e-2  ),
        (124 , 0.026786665 * 1e-2  ),
        (125 , 0.03401805 * 1e-2  ),
        (126 , 0.058213923 * 1e-2  ),
        (127 , 0.157255954 * 1e-2  ),
        (128 , 0.348032728 * 1e-2  ),
        (129 , 0.543140253 * 1e-2 ),
        (130 , 1.811058294 * 1e-2  ),
        (131 , 2.890824589 * 1e-2  ),
        (132 , 4.313440531 * 1e-2  ),
        (133 , 6.696198002 * 1e-2  ),
        (134 , 7.84928048 * 1e-2  ),
        (135 , 6.546439498 * 1e-2  ),
        (136 , 6.097407229 * 1e-2  ),
        (137 , 6.343481393 * 1e-2 ),
        (138 , 6.775188009 * 1e-2  ),
        (139 , 6.476024729 * 1e-2  ),
        (140 , 6.222876589 * 1e-2  ),
        (141 , 5.852968798 * 1e-2  ),
        (142 , 5.829084852 * 1e-2  ),
        (143 , 5.96712544 * 1e-2  ),
        (144 , 5.50281141 * 1e-2  ),
        (145 , 3.942641326 * 1e-2  ),
        (146 , 2.99791899 * 1e-2  ),
        (147 , 2.246727171 * 1e-2  ),
        (148 , 1.672677043 * 1e-2  ),
        (149 , 1.082444712 * 1e-2 ),
        (150 , 0.653327209 * 1e-2  ),
        (151 , 0.418766758 * 1e-2  ),
        (152 , 0.266913263 * 1e-2  ),
        (153 , 0.158278407 * 1e-2  ),
        (154 , 0.074434159 * 1e-2  ),
        (155 , 0.032134942 * 1e-2  ),
        (156 , 0.014852928 * 1e-2 ),
        (157 , 0.00615086 * 1e-2 ),
        (158 , 0.003285185 * 1e-2  ),
        (159 , 0.001009412 * 1e-2 ),
        (160 , 3.190061691E-4 * 1e-2 ),
        (161 , 8.529420585E-5 * 1e-2 ),
        (162 , 1.590628959E-5 * 1e-2 ),
        (163 , 6.101986897E-6 * 1e-2 ),
        (164 , 1.88168389E-6 * 1e-2 ),
        (165 , 9.514985206E-7 * 1e-2 ),
        (166 , 3.6241484E-7 * 1e-2 ),
        (167 , 2.471381139E-7 * 1e-2 ),
        (168 , 5.704560932E-8 * 1e-2 ),
        (169 , 2.38500397E-8 * 1e-2 ),
        (170 , 5.00652931E-9 * 1e-2 ),
        (171 , 2.3470269E-9 * 1e-2 ),
        (172 , 7.6867481E-10 * 1e-2 ),
        ];

    let neutron_energy = Energy::new::<electronvolt>(0.0253);
    let test_u235_fission_distribution = 
        Nuclide::U235.get_mass_yield_vector(neutron_energy);

    // this part cycles through the whole yield curve, 
    // testing to see if the yields add up
    for (idx, (ref_mass_number,ref_fiss_yield)) in 
        ref_u235_thermal_fission_distribution.clone().into_iter().enumerate() {

            let (test_mass_number, test_fiss_yield) = 
                test_u235_fission_distribution[idx];

            assert_eq!(ref_mass_number,test_mass_number);
            dbg!(&(ref_mass_number,ref_fiss_yield));

            approx::assert_relative_eq!(
                ref_fiss_yield,
                test_fiss_yield,
                max_relative=1e-11);

    }
    

}
