use uom::si::energy::kiloelectronvolt;
use uom::si::f64::Energy;
use crate::endf_8_parent_independent_yields::nuclides::Nuclide;

/// test for u238 thermal neutron spectrum mass distribution
/// from independent fission yields
///
/// this helps give some assurance that the yield curves were coded correctly
#[test]
pub fn u238_500_kev_mass_distribution(){

    // note that the yields are in percentage in this case
    let ref_u238_500_kev_fission_distribution: Vec<(u32,f64)> = vec![
        (66, 3.70462751E-6 ), 
        (67, 2.143364415E-5 ), 
        (68, 2.80312004E-5 ), 
        (69, 3.591197314E-5 ), 
        (70, 4.41950777E-5 ), 
        (71, 4.948808611E-5 ), 
        (72, 6.054419703E-5 ), 
        (73, 2.06004115E-4 ), 
        (74, 2.771875869E-4 ), 
        (75, 4.622192794E-4 ), 
        (76, 8.007113201E-4 ), 
        (77, 0.003301927 ), 
        (78, 0.01116444 ), 
        (79, 0.032600765 ), 
        (80, 0.041071144 ), 
        (81, 0.085601472 ), 
        (82, 0.213945808 ), 
        (83, 0.393645808 ), 
        (84, 0.624896533 ), 
        (85, 0.928114912 ), 
        (86, 1.254199801 ), 
        (87, 1.590460519 ), 
        (88, 1.82791177 ), 
        (89, 2.694770925 ), 
        (90, 3.46677071 ), 
        (91, 4.081954099 ), 
        (92, 4.317273159 ), 
        (93, 4.640786537 ), 
        (94, 4.822732264 ), 
        (95, 5.129210088 ), 
        (96, 6.158909403 ), 
        (97, 5.569323437 ), 
        (98, 5.868143107 ), 
        (99, 6.237961985 ), 
        (100, 6.724579738 ), 
        (101, 6.209044415 ), 
        (102, 6.446565153 ), 
        (103, 6.272673537 ), 
        (104, 4.992314501 ), 
        (105, 4.092844728 ), 
        (106, 2.495330594 ), 
        (107, 1.445875943 ), 
        (108, 0.600972882 ), 
        (109, 0.251719516 ), 
        (110, 0.14163591 ), 
        (111, 0.071215602 ), 
        (112, 0.055901342 ), 
        (113, 0.046112448 ), 
        (114, 0.039257431 ), 
        (115, 0.037547647 ), 
        (116, 0.039313697 ), 
        (117, 0.037731975 ), 
        (118, 0.043176564 ), 
        (119, 0.039720694 ), 
        (120, 0.03871442 ), 
        (121, 0.036907282 ), 
        (122, 0.041067234 ), 
        (123, 0.044557663 ), 
        (124, 0.046460955 ), 
        (125, 0.048524785 ), 
        (126, 0.053861555 ), 
        (127, 0.136474806 ), 
        (128, 0.284164641 ), 
        (129, 1.012532366 ), 
        (130, 1.91395347 ), 
        (131, 3.287839699 ), 
        (132, 5.150981311 ), 
        (133, 6.729358264 ), 
        (134, 7.457113758 ), 
        (135, 7.041598409 ), 
        (136, 6.684492582 ), 
        (137, 6.225989471 ), 
        (138, 5.773952659 ), 
        (139, 5.810165832 ), 
        (140, 5.839304134 ), 
        (141, 5.379017817 ), 
        (142, 4.543029671 ), 
        (143, 4.616785906 ), 
        (144, 4.534554092 ), 
        (145, 3.870584601 ), 
        (146, 3.461345646 ), 
        (147, 2.592734607 ), 
        (148, 2.104679862 ), 
        (149, 1.631634931 ), 
        (150, 1.274931161 ), 
        (151, 0.799402908 ), 
        (152, 0.530231593 ), 
        (153, 0.414790364 ), 
        (154, 0.216281906 ), 
        (155, 0.141515119 ), 
        (156, 0.076033321 ), 
        (157, 0.041375023 ), 
        (158, 0.018487512 ), 
        (159, 0.00861914 ), 
        (160, 0.003545028 ), 
        (161, 0.001215364 ), 
        (162, 3.405962822E-4 ), 
        (163, 2.0420046E-4 ), 
        (164, 1.247614893E-4 ), 
        (165, 7.667431325E-5 ), 
        (166, 5.666655558E-5 ), 
        (167, 4.351727009E-5 ), 
        (168, 2.83782358E-5 ), 
        (169, 1.701293818E-5 ), 
        (170, 1.021359403E-5 ), 
        (171, 5.714843868E-6 ), 
        (172, 1.066050506E-5 ), 
        ];

    let neutron_energy = Energy::new::<kiloelectronvolt>(500.0);
    let test_u238_fission_distribution = 
        Nuclide::U238.get_mass_yield_vector(neutron_energy);

    // this part cycles through the whole yield curve, 
    // testing to see if the yields add up
    for (idx, (ref_mass_number,ref_fiss_yield)) in 
        ref_u238_500_kev_fission_distribution.clone().into_iter().enumerate() {

            let (test_mass_number, test_fiss_yield) = 
                test_u238_fission_distribution[idx];

            assert_eq!(ref_mass_number,test_mass_number);
            dbg!(&(ref_mass_number,ref_fiss_yield));

            approx::assert_relative_eq!(
                ref_fiss_yield * 1e-2,
                test_fiss_yield,
                max_relative=1e-6);

    }


}
